
import Head from 'next/head'
import Image from 'next/image'
import styles from '../../styles/Home.module.css'



import { Toolbar } from '../Toolbar'
import { useEffect, useState } from 'react'
import Form from 'react-bootstrap/Form';
import Button from 'react-bootstrap/Button';
import Router from 'next/router'
import Card from 'react-bootstrap/Card'
import { useRouter } from 'next/router'
import Container from 'react-bootstrap/Container'
import Row from 'react-bootstrap/Row'
import Col from 'react-bootstrap/Col'

export default function Home() {
    const [userData, setUserData] = useState({})
    const [recipe, setRecipe] = useState({})
    const router = useRouter()
    const { id } = router.query

    const [ingreds, setIngreds] = useState([])
    const [instructions, setInstructions] = useState([])
    const [imageData, setImageData] = useState()
    const [recipeName, setRecipeName] = useState("")
    



    async function getUserDetails() {
        var data = await (await fetch("/api/UserDetails?EDGEtoken=" + localStorage.getItem('Token'))).json()
        console.log(data)
        setUserData(data.res)
    }

    async function getIngredDetails_WW() {
        const newItems = [...ingreds];
        for (var ingredients in newItems) {
            var data = await (await fetch("/api/Ingredients?" +"ingredient=" + newItems[ingredients].Name+  "&measurement=" + newItems[ingredients].AmountType + "&EDGEtoken=" + localStorage.getItem('Token'))).json()
            console.log(data)
            if (data.success === true){
                // setIngreds()
                newItems[ingredients].price = data.data.price;
                newItems[ingredients].price_measure = data.data.measure;
                newItems[ingredients].WW_Name = data.data.WW_Name;
            }
            // console.log(ingreds[ingredients])
        }
        setIngreds(newItems)
    }

    const deleteRecipe = async function (e) {

        var data = await (await fetch("/api/Recipe/" +  String(await router.query.id) + "?EDGEtoken=" + localStorage.getItem('Token'), {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
            })
        })).json()
        console.log(data)
        if (data.success === false || data.success === undefined) {
            if (data.message !== undefined) {
                alert(data.message)
            } else {
                alert("failed, unexpected error")
            }

        } else {
            redirect("/recipes")
        }
    }

    async function getRecipeDetails() {
        var data = await (await fetch("/api/Recipe/" + String(await router.query.id) + "?EDGEtoken=" + localStorage.getItem('Token'))).json()
        console.log(data)
        setRecipe(data.res)
        setIngreds(data.res.ingredients)
        setInstructions(data.res.instructions)
        setImageData(data.res.image)
        setRecipeName(data.res.name)
    }

    // TJOS ISNT WORKING AGAGAG
    const getAproxTotalRecipeCost = () =>{
        var total = 0
        for (var ingredient in ingreds){
            var current = ingreds[ingredient]
            if (current.price !== undefined){
                total= total+ parseInt(current.price)
            }
        }
        return(<h1>HI {total}</h1>)

    }
    


    useEffect(() => {
        if (localStorage.getItem('Token') === null || localStorage.getItem('Token') === undefined) {
            alert("please re-log in")
            Router.push("/login")
        }

        // getUserDetails();
        getRecipeDetails();
        // console.log(await data)
    }, []) // <-- empty dependency array


    const redirect = async function (page) {
        Router.push(page)
    };


    if (recipe === undefined ) {
        return (
            <div>
                <Toolbar>
                </Toolbar>
                <div className={styles.container}>
                    <Head>
                        <title>Recipes</title>
                        <meta name="description" content="Generated by create next app" />
                        <link rel="icon" href="/favicon.ico" />
                    </Head>







                    <main className={styles.main}>
                        RECIPEID = {id}
                        Loading

                    </main>

                    <footer className={styles.footer}>
                        <a
                            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                            target="_blank"
                            rel="noopener noreferrer"
                        >

                        </a>
                    </footer>
                </div>
            </div>
        )
    } else {

        return (
            <div>
                <Toolbar>
                </Toolbar>
                <div className={styles.container}>
                    <Head>
                        <title>Recipes</title>
                        <meta name="description" content="Generated by create next app" />
                        <link rel="icon" href="/favicon.ico" />
                    </Head>







                    <main className={styles.main}>
                        RECIPEID = {id}
                        <Container>
                            <h1>General</h1>
                            <Row style={{paddingBottom: "1vw", "alignItems": "center"}}>
                                <Col>
                                    <Card style={{ maxWidth: '80vw', color: "black" }}>
                                        {/* <Card.Img variant="top" src="/edge_login_image.png" /> */}
                                        <Card.Body>
                                            {/* <Card.Title>Add ingredient</Card.Title> */}

                                            <Form>

                                                <Form.Group className="mb-3" id="formBasicEmail">
                                                    <Form.Label>Name: {recipeName}</Form.Label>
                                                    
                                                </Form.Group>

                                            </Form>



                                        </Card.Body>
                                    </Card>
                                </Col>
                            </Row>
                            <h1>Ingredients</h1>
                            <Row style={{paddingBottom: "1vw"}}>

                                
                                <Col>

                                    <Card style={{ maxWidth: '80vw', color: "black"}}>
                                        {/* <Card.Img variant="top" src="/edge_login_image.png" /> */}
                                        <Card.Body>
                                            <Card.Title>Ingred Summary</Card.Title>
                                            <Container>

                                                {ingreds.map((ingred) => {
                                                    return (
                                                        <div>
                                                            <Row>
                                                                <Col>
                                                                    <li>{ingred.Amount} {ingred.AmountType} {ingred.Name}</li>
                                                                </Col>
                                                                <Col>
                                                                ${ingred.price} / {ingred.price_measure } 
                                                                </Col>
                                                                <Col>{ingred.WW_Name}</Col>
                                                                <Col>
                                                                Total: $
                                                                {ingred.price_measure === "1KG" && ingred.AmountType === "g"?<>{(ingred.price*ingred.Amount/1000).toFixed(2)}</>:<></>}
                                                                {ingred.price_measure === "1EA" && ingred.AmountType === "x"?<>{(ingred.price*ingred.Amount).toFixed(2)}</>:<></>}
                                                                {ingred.price_measure === "1KG" && ingred.AmountType === "c"?<>{((ingred.price*220*ingred.Amount)/1000).toFixed(2)}</>:<></>}
                                                                </Col>
                                                            </Row>
                                                        </div>
                                                    )
                                                })}
                                                <Row>
                                                <Col></Col>
                                                <Col></Col>
                                                <Col></Col>
                                                <Col>Approx Total Cost: ${getAproxTotalRecipeCost}</Col>
                                                
                                                </Row>
                                            </Container>

                                        </Card.Body>
                                    </Card>

                                </Col>
                            </Row>
                            <Row style={{paddingBottom: "1vw"}}>
                                <h1>Instructions</h1>
                                
                                <Col>
                                    <Card style={{ maxWidth: '80vw', color: "black"}}>
                                        {/* <Card.Img variant="top" src="/edge_login_image.png" /> */}
                                        <Card.Body>
                                            <Card.Title>Instructions Summary</Card.Title>
                                            <Container>
                                                <ol>
                                                    {instructions.map((instruction) => {
                                                        return (
                                                            <div>
                                                                <Row>
                                                                    <Col>
                                                                        <li>{instruction.Text} </li>
                                                                    </Col>
                                                                    
                                                                </Row>
                                                            </div>
                                                        )
                                                    })}
                                                </ol>
                                            </Container>

                                        </Card.Body>
                                    </Card>
                                </Col>
                            </Row>
                            <Row style={{paddingBottom: "1vw", display: "flex"}}>
                                
                                <Col >
                                    {/* {image!==undefined?<Image src={image}></Image>: <h4>no image</h4>} */}
                                    <Card style={{ maxWidth: '80vw', color: "black", "backgroundColor": "rgba(76, 175, 80, 0.0)" }}>
                                        <img src={imageData} style={{  display: "block",maxWidth:"20vw",maxHeight:"20vw",width: "auto",height: "auto" }} />
                                    </Card>

                                </Col>
                            </Row>
                            <Row>
                                <Col>
                                <Button variant="danger" onClick={()=>deleteRecipe()}>
                                    Delete Recipe
                                </Button>
                                </Col>
                            </Row>

                        </Container>
                        <Button onClick={()=>getIngredDetails_WW()}>Get WW Data</Button>
                    </main>

                    <footer className={styles.footer}>
                        <a
                            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                            target="_blank"
                            rel="noopener noreferrer"
                        >

                        </a>
                    </footer>
                </div>
            </div>
        )
    }
}
